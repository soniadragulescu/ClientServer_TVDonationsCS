// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: model.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from model.proto</summary>
public static partial class ModelReflection {

  #region Descriptor
  /// <summary>File descriptor for model.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ModelReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cgttb2RlbC5wcm90byJFCgVEb25vchIKCgJpZBgBIAEoBRIMCgRuYW1lGAIg",
          "ASgJEg8KB2FkZHJlc3MYAyABKAkSEQoJdGVsZXBob25lGAQgASgJIi0KBENh",
          "c2USCgoCaWQYASABKAUSDAoEbmFtZRgCIAEoCRILCgNzdW0YAyABKAEiLwoJ",
          "Vm9sdW50ZWVyEhAKCHVzZXJuYW1lGAEgASgJEhAKCHBhc3N3b3JkGAIgASgJ",
          "IpgCCgdSZXF1ZXN0EhsKBHR5cGUYASABKA4yDS5SZXF1ZXN0LlR5cGUSHQoJ",
          "dm9sdW50ZWVyGAIgASgLMgouVm9sdW50ZWVyEg8KB2Rvbm9ySWQYAyABKAUS",
          "DAoEbmFtZRgEIAEoCRIPCgdhZGRyZXNzGAUgASgJEhEKCXRlbGVwaG9uZRgG",
          "IAEoCRILCgNzdW0YByABKAESDgoGY2FzZUlkGAggASgFEhEKCXN1YnN0cmlu",
          "ZxgJIAEoCSJeCgRUeXBlEgsKB1Vua25vd24QABIJCgVMb2dpbhABEgoKBkxv",
          "Z291dBACEg8KC05ld0RvbmF0aW9uEAMSDwoLR2V0QWxsQ2FzZXMQBBIQCgxH",
          "ZXRBbGxEb25vcnMQBSK8AQoIUmVzcG9uc2USHAoEdHlwZRgBIAEoDjIOLlJl",
          "c3BvbnNlLlR5cGUSDQoFZXJyb3IYAiABKAkSFgoGZG9ub3JzGAMgAygLMgYu",
          "RG9ub3ISFAoFY2FzZXMYBCADKAsyBS5DYXNlIlUKBFR5cGUSCwoHVW5rbm93",
          "bhAAEgYKAk9LEAESCQoFRXJyb3IQAhIKCgZVcGRhdGUQAxIPCgtHZXRBbGxD",
          "YXNlcxAEEhAKDEdldEFsbERvbm9ycxAFYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Donor), global::Donor.Parser, new[]{ "Id", "Name", "Address", "Telephone" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Case), global::Case.Parser, new[]{ "Id", "Name", "Sum" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Volunteer), global::Volunteer.Parser, new[]{ "Username", "Password" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Request), global::Request.Parser, new[]{ "Type", "Volunteer", "DonorId", "Name", "Address", "Telephone", "Sum", "CaseId", "Substring" }, null, new[]{ typeof(global::Request.Types.Type) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Response), global::Response.Parser, new[]{ "Type", "Error", "Donors", "Cases" }, null, new[]{ typeof(global::Response.Types.Type) }, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Donor : pb::IMessage<Donor> {
  private static readonly pb::MessageParser<Donor> _parser = new pb::MessageParser<Donor>(() => new Donor());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Donor> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ModelReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Donor() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Donor(Donor other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    address_ = other.address_;
    telephone_ = other.telephone_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Donor Clone() {
    return new Donor(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 3;
  private string address_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Address {
    get { return address_; }
    set {
      address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "telephone" field.</summary>
  public const int TelephoneFieldNumber = 4;
  private string telephone_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Telephone {
    get { return telephone_; }
    set {
      telephone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Donor);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Donor other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Address != other.Address) return false;
    if (Telephone != other.Telephone) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Address.Length != 0) hash ^= Address.GetHashCode();
    if (Telephone.Length != 0) hash ^= Telephone.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Address.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Address);
    }
    if (Telephone.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Telephone);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Address.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
    }
    if (Telephone.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Telephone);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Donor other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Address.Length != 0) {
      Address = other.Address;
    }
    if (other.Telephone.Length != 0) {
      Telephone = other.Telephone;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Address = input.ReadString();
          break;
        }
        case 34: {
          Telephone = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Case : pb::IMessage<Case> {
  private static readonly pb::MessageParser<Case> _parser = new pb::MessageParser<Case>(() => new Case());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Case> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ModelReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Case() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Case(Case other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    sum_ = other.sum_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Case Clone() {
    return new Case(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sum" field.</summary>
  public const int SumFieldNumber = 3;
  private double sum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Sum {
    get { return sum_; }
    set {
      sum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Case);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Case other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Sum, other.Sum)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Sum != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Sum);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Sum != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(Sum);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Sum != 0D) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Case other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Sum != 0D) {
      Sum = other.Sum;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 25: {
          Sum = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class Volunteer : pb::IMessage<Volunteer> {
  private static readonly pb::MessageParser<Volunteer> _parser = new pb::MessageParser<Volunteer>(() => new Volunteer());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Volunteer> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ModelReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Volunteer() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Volunteer(Volunteer other) : this() {
    username_ = other.username_;
    password_ = other.password_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Volunteer Clone() {
    return new Volunteer(this);
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 1;
  private string username_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private string password_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Volunteer);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Volunteer other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Username != other.Username) return false;
    if (Password != other.Password) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Username.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Username);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Password);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Volunteer other) {
    if (other == null) {
      return;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Username = input.ReadString();
          break;
        }
        case 18: {
          Password = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Request : pb::IMessage<Request> {
  private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ModelReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Request(Request other) : this() {
    type_ = other.type_;
    volunteer_ = other.volunteer_ != null ? other.volunteer_.Clone() : null;
    donorId_ = other.donorId_;
    name_ = other.name_;
    address_ = other.address_;
    telephone_ = other.telephone_;
    sum_ = other.sum_;
    caseId_ = other.caseId_;
    substring_ = other.substring_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Request Clone() {
    return new Request(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::Request.Types.Type type_ = global::Request.Types.Type.Unknown;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Request.Types.Type Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "volunteer" field.</summary>
  public const int VolunteerFieldNumber = 2;
  private global::Volunteer volunteer_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Volunteer Volunteer {
    get { return volunteer_; }
    set {
      volunteer_ = value;
    }
  }

  /// <summary>Field number for the "donorId" field.</summary>
  public const int DonorIdFieldNumber = 3;
  private int donorId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DonorId {
    get { return donorId_; }
    set {
      donorId_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 4;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "address" field.</summary>
  public const int AddressFieldNumber = 5;
  private string address_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Address {
    get { return address_; }
    set {
      address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "telephone" field.</summary>
  public const int TelephoneFieldNumber = 6;
  private string telephone_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Telephone {
    get { return telephone_; }
    set {
      telephone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sum" field.</summary>
  public const int SumFieldNumber = 7;
  private double sum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Sum {
    get { return sum_; }
    set {
      sum_ = value;
    }
  }

  /// <summary>Field number for the "caseId" field.</summary>
  public const int CaseIdFieldNumber = 8;
  private int caseId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CaseId {
    get { return caseId_; }
    set {
      caseId_ = value;
    }
  }

  /// <summary>Field number for the "substring" field.</summary>
  public const int SubstringFieldNumber = 9;
  private string substring_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Substring {
    get { return substring_; }
    set {
      substring_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (!object.Equals(Volunteer, other.Volunteer)) return false;
    if (DonorId != other.DonorId) return false;
    if (Name != other.Name) return false;
    if (Address != other.Address) return false;
    if (Telephone != other.Telephone) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Sum, other.Sum)) return false;
    if (CaseId != other.CaseId) return false;
    if (Substring != other.Substring) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != global::Request.Types.Type.Unknown) hash ^= Type.GetHashCode();
    if (volunteer_ != null) hash ^= Volunteer.GetHashCode();
    if (DonorId != 0) hash ^= DonorId.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Address.Length != 0) hash ^= Address.GetHashCode();
    if (Telephone.Length != 0) hash ^= Telephone.GetHashCode();
    if (Sum != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Sum);
    if (CaseId != 0) hash ^= CaseId.GetHashCode();
    if (Substring.Length != 0) hash ^= Substring.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != global::Request.Types.Type.Unknown) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (volunteer_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Volunteer);
    }
    if (DonorId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(DonorId);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Name);
    }
    if (Address.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Address);
    }
    if (Telephone.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Telephone);
    }
    if (Sum != 0D) {
      output.WriteRawTag(57);
      output.WriteDouble(Sum);
    }
    if (CaseId != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(CaseId);
    }
    if (Substring.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(Substring);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != global::Request.Types.Type.Unknown) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (volunteer_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Volunteer);
    }
    if (DonorId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DonorId);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Address.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
    }
    if (Telephone.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Telephone);
    }
    if (Sum != 0D) {
      size += 1 + 8;
    }
    if (CaseId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CaseId);
    }
    if (Substring.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Substring);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Request other) {
    if (other == null) {
      return;
    }
    if (other.Type != global::Request.Types.Type.Unknown) {
      Type = other.Type;
    }
    if (other.volunteer_ != null) {
      if (volunteer_ == null) {
        Volunteer = new global::Volunteer();
      }
      Volunteer.MergeFrom(other.Volunteer);
    }
    if (other.DonorId != 0) {
      DonorId = other.DonorId;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Address.Length != 0) {
      Address = other.Address;
    }
    if (other.Telephone.Length != 0) {
      Telephone = other.Telephone;
    }
    if (other.Sum != 0D) {
      Sum = other.Sum;
    }
    if (other.CaseId != 0) {
      CaseId = other.CaseId;
    }
    if (other.Substring.Length != 0) {
      Substring = other.Substring;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Type = (global::Request.Types.Type) input.ReadEnum();
          break;
        }
        case 18: {
          if (volunteer_ == null) {
            Volunteer = new global::Volunteer();
          }
          input.ReadMessage(Volunteer);
          break;
        }
        case 24: {
          DonorId = input.ReadInt32();
          break;
        }
        case 34: {
          Name = input.ReadString();
          break;
        }
        case 42: {
          Address = input.ReadString();
          break;
        }
        case 50: {
          Telephone = input.ReadString();
          break;
        }
        case 57: {
          Sum = input.ReadDouble();
          break;
        }
        case 64: {
          CaseId = input.ReadInt32();
          break;
        }
        case 74: {
          Substring = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Request message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Type {
      [pbr::OriginalName("Unknown")] Unknown = 0,
      [pbr::OriginalName("Login")] Login = 1,
      [pbr::OriginalName("Logout")] Logout = 2,
      [pbr::OriginalName("NewDonation")] NewDonation = 3,
      [pbr::OriginalName("GetAllCases")] GetAllCases = 4,
      [pbr::OriginalName("GetAllDonors")] GetAllDonors = 5,
    }

  }
  #endregion

}

public sealed partial class Response : pb::IMessage<Response> {
  private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ModelReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Response(Response other) : this() {
    type_ = other.type_;
    error_ = other.error_;
    donors_ = other.donors_.Clone();
    cases_ = other.cases_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Response Clone() {
    return new Response(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::Response.Types.Type type_ = global::Response.Types.Type.Unknown;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Response.Types.Type Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "error" field.</summary>
  public const int ErrorFieldNumber = 2;
  private string error_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Error {
    get { return error_; }
    set {
      error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "donors" field.</summary>
  public const int DonorsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::Donor> _repeated_donors_codec
      = pb::FieldCodec.ForMessage(26, global::Donor.Parser);
  private readonly pbc::RepeatedField<global::Donor> donors_ = new pbc::RepeatedField<global::Donor>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Donor> Donors {
    get { return donors_; }
  }

  /// <summary>Field number for the "cases" field.</summary>
  public const int CasesFieldNumber = 4;
  private static readonly pb::FieldCodec<global::Case> _repeated_cases_codec
      = pb::FieldCodec.ForMessage(34, global::Case.Parser);
  private readonly pbc::RepeatedField<global::Case> cases_ = new pbc::RepeatedField<global::Case>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Case> Cases {
    get { return cases_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Error != other.Error) return false;
    if(!donors_.Equals(other.donors_)) return false;
    if(!cases_.Equals(other.cases_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != global::Response.Types.Type.Unknown) hash ^= Type.GetHashCode();
    if (Error.Length != 0) hash ^= Error.GetHashCode();
    hash ^= donors_.GetHashCode();
    hash ^= cases_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != global::Response.Types.Type.Unknown) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (Error.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Error);
    }
    donors_.WriteTo(output, _repeated_donors_codec);
    cases_.WriteTo(output, _repeated_cases_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != global::Response.Types.Type.Unknown) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Error.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
    }
    size += donors_.CalculateSize(_repeated_donors_codec);
    size += cases_.CalculateSize(_repeated_cases_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Response other) {
    if (other == null) {
      return;
    }
    if (other.Type != global::Response.Types.Type.Unknown) {
      Type = other.Type;
    }
    if (other.Error.Length != 0) {
      Error = other.Error;
    }
    donors_.Add(other.donors_);
    cases_.Add(other.cases_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Type = (global::Response.Types.Type) input.ReadEnum();
          break;
        }
        case 18: {
          Error = input.ReadString();
          break;
        }
        case 26: {
          donors_.AddEntriesFrom(input, _repeated_donors_codec);
          break;
        }
        case 34: {
          cases_.AddEntriesFrom(input, _repeated_cases_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Response message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Type {
      [pbr::OriginalName("Unknown")] Unknown = 0,
      [pbr::OriginalName("OK")] Ok = 1,
      [pbr::OriginalName("Error")] Error = 2,
      [pbr::OriginalName("Update")] Update = 3,
      [pbr::OriginalName("GetAllCases")] GetAllCases = 4,
      [pbr::OriginalName("GetAllDonors")] GetAllDonors = 5,
    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
